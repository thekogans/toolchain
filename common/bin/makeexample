#!/bin/bash

# Copyright 2011 Boris Kogan (boris@thekogans.net)
#
# This file is part of thekogans_toolchain.
#
# thekogans_toolchain is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# thekogans_toolchain is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with thekogans_toolchain. If not, see <http://www.gnu.org/licenses/>.

# This script will configure a directory tree and some helpful
# starter files for a new organization/project/branch example.

function show_command_help () {
    echo "usage: $0 \
$environment_options \
[[-o | --organization]:organization] \
[[-p | --project]:project] \
[[-b | --branch]:[trunk | branches/branch | tags/tag]] \
[[-v | --version]:version] \
[-e | --example]:example \
[[-pt | --project-type]:[program | library | plugin]] \
[[-t | --template]:template]"
}

# Create the environment.
if [ "$TOOLCHAIN_ROOT" == "" ]; then
    TOOLCHAIN_COMMON_BIN="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)"
    if [ ! -e "$TOOLCHAIN_COMMON_BIN"/setenvironment ]; then
        echo "$TOOLCHAIN_COMMON_BIN/setenvironment not found."
        exit 1
    fi
    . "$TOOLCHAIN_COMMON_BIN"/setenvironment "$@"
fi

organization="$TOOLCHAIN_DEFAULT_ORGANIZATION"
project="$TOOLCHAIN_DEFAULT_PROJECT"
branch=
version=
example=
project_type=program
template=

# Parse command line options.
for i in "$@"; do
    case $i in
        -o:*|--organization:*)
            organization="${i#*:}"
            ;;
        -p:*|--project:*)
            project="${i#*:}"
            ;;
        -b:*|--branch:*)
            branch="${i#*:}"
            ;;
        -v:*|--version:*)
            version="${i#*:}"
            ;;
        -e:*|--example:*)
            example="${i#*:}"
            ;;
        -pt:*|--project-type:*)
            project_type="${i#*:}"
            ;;
        -t:*|--template:*)
            template="${i#*:}"
            ;;
    esac
done

# Validate input.
if [ "$organization" == "" ] || [ "$project" == "" ] || [ "$example" == "" ]; then
    echo "Must specify organization, project and example."
    exit 1
fi

project_root="$(get_project_root -o:$organization -p:$project -b:$branch -v:$version -e:$example)"
if [ ! -d "$project_root" ]; then
    mkdir -p "$project_root"
    check_errors $?
fi
cd "$project_root"
check_errors $?

mkdir -p include/"$organization"/"${project//_//}"/"${example//_//}" src resources doc tests
check_errors $?
svc="$(get_default_svc -o:$organization)"
if [ "$svc" == "git" ]; then
    touch include/"$organization"/"${project//_//}"/"${example//_//}"/.keep src/.keep resources/.keep doc/.keep tests/.keep
    check_errors $?
    cp -v "$TOOLCHAIN_ROOT"/common/resources/.gitignore .gitignore
    check_errors $?
fi
touch README ReleaseNotes
check_errors $?

ORGANIZATION=`echo ${organization} | tr '[:lower:]' '[:upper:]'`
PROJECT=`echo ${project} | tr '[:lower:]' '[:upper:]'`
EXAMPLE=`echo ${example} | tr '[:lower:]' '[:upper:]'`

if [ "$project_type" == "library" ]; then
    cat > include/"${organization}"/"${project//_//}"/"${example//_//}"/Config.h << EOF
#if !defined (__${organization}_${project}_${example}_Config_h)
#define __${organization}_${project}_${example}_Config_h

#if !defined (__cplusplus)
    #error lib${organization}_${project}_${example} requires C++ compilation (use a .cpp suffix)
#endif // !defined (__cplusplus)

#if defined (TOOLCHAIN_OS_Windows)
    #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_API __stdcall
    #if defined (${ORGANIZATION}_${PROJECT}_${EXAMPLE}_TYPE_Shared)
        #if defined (_LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_BUILD)
            #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DECL __declspec (dllexport)
        #else // defined (_LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_BUILD)
            #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DECL __declspec (dllimport)
        #endif // defined (_LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_BUILD)
    #else // defined (${ORGANIZATION}_${PROJECT}_${EXAMPLE}_TYPE_Shared)
        #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DECL
    #endif // defined (${ORGANIZATION}_${PROJECT}_${EXAMPLE}_TYPE_Shared)
    #if defined (_MSC_VER)
        #pragma warning (disable: 4251)  // using non-exported as public in exported
        #pragma warning (disable: 4786)
    #endif // defined (_MSC_VER)
#else // defined (TOOLCHAIN_OS_Windows)
    #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_API
    #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DECL
#endif // defined (TOOLCHAIN_OS_Windows)

/// \def ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DISALLOW_COPY_AND_ASSIGN(type)
/// A convenient macro to suppress copy construction and assignment.
#define ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DISALLOW_COPY_AND_ASSIGN(type)\\
private:\\
    type (const type &);\\
    type &operator = (const type &);

/// \def ${ORGANIZATION}_${PROJECT}_${EXAMPLE}
/// Logging subsystem name.
#define ${ORGANIZATION}_${PROJECT}_${EXAMPLE} "${organization}_${project}_${example}"

#endif // !defined (__${organization}_${project}_${example}_Config_h)
EOF
    check_errors $?

    cat > include/"${organization}"/"${project//_//}"/"${example//_//}"/Version.h << EOF
#if !defined (__${organization}_${project}_${example}_Version_h)
#define __${organization}_${project}_${example}_Version_h

#include <thekogans/util/Version.h>
#include "${organization}/${project//_//}/${example//_//}/Config.h"

$(begin_namespace -o:$organization -p:$project -e:$example)

$(indent_namespace -o:$organization -p:$project -e:$example)/// \brief
$(indent_namespace -o:$organization -p:$project -e:$example)/// Return the compiled ${organization}_${project}_${example} version.
$(indent_namespace -o:$organization -p:$project -e:$example)/// \return Compiled ${organization}_${project}_${example} version.
$(indent_namespace -o:$organization -p:$project -e:$example)_LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DECL const thekogans::util::Version &
$(indent_namespace -o:$organization -p:$project -e:$example)    _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_API GetVersion ();

$(end_namespace -o:$organization -p:$project -e:$example)

#endif // !defined (__${organization}_${project}_${example}_Version_h)
EOF
    check_errors $?

    cat > src/Version.cpp << EOF
#include "${organization}/${project//_//}/${example//_//}/Version.h"

using namespace thekogans;

$(begin_namespace -o:$organization -p:$project -e:$example)

$(indent_namespace -o:$organization -p:$project -e:$example)_LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DECL const util::Version &
$(indent_namespace -o:$organization -p:$project -e:$example)_LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_API GetVersion () {
$(indent_namespace -o:$organization -p:$project -e:$example)    static const util::Version *version = new util::Version (
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_MAJOR_VERSION,
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_MINOR_VERSION,
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_PATCH_VERSION);
$(indent_namespace -o:$organization -p:$project -e:$example)    return *version;
$(indent_namespace -o:$organization -p:$project -e:$example)}

$(end_namespace -o:$organization -p:$project -e:$example)
EOF
    check_errors $?

    cat > thekogans_make.xml << EOF
<thekogans_make organization = "${organization}"
                project = "${project}_${example}"
                project_type = "library"
                major_version = "0"
                minor_version = "1"
                patch_version = "0"
                guid = "`$(get_toolchain_program -o:thekogans -p:genguid)`"
                schema_version = "`$(get_toolchain_program -o:thekogans -p:make) -a:get_schema_version`">
  <dependencies>
    <dependency organization = "thekogans"
                 name = "util"/>
  </dependencies>
  <cpp_headers prefix = "include">
    <cpp_header>\$(organization)/\$(project_directory)/Config.h</cpp_header>
    <cpp_header>\$(organization)/\$(project_directory)/Version.h</cpp_header>
  </cpp_headers>
  <cpp_sources prefix = "src">
    <cpp_source>Version.cpp</cpp_source>
  </cpp_sources>
</thekogans_make>
EOF
    check_errors $?
elif [ "$project_type" == "program" ]; then
    cat > include/"${organization}"/"${project//_//}"/"${example//_//}"/Version.h << EOF
#if !defined (__${organization}_${project}_${example}_Version_h)
#define __${organization}_${project}_${example}_Version_h

#include <thekogans/util/Version.h>

$(begin_namespace -o:$organization -p:$project -e:$example)

$(indent_namespace -o:$organization -p:$project -e:$example)/// \brief
$(indent_namespace -o:$organization -p:$project -e:$example)/// Return the compiled ${organization}_${project}_${example} version.
$(indent_namespace -o:$organization -p:$project -e:$example)/// \return Compiled ${organization}_${project}_${example} version.
$(indent_namespace -o:$organization -p:$project -e:$example)const thekogans::util::Version &GetVersion ();

$(end_namespace -o:$organization -p:$project -e:$example)

#endif // !defined (__${organization}_${project}_${example}_Version_h)
EOF
    check_errors $?

    cat > src/main.cpp << EOF
int main (
        int /*argc*/,
        const char * /*argv*/ []) {
    return 0;
}
EOF
    check_errors $?

    cat > src/Version.cpp << EOF
#include "${organization}/${project//_//}/${example//_//}/Version.h"

using namespace thekogans;

$(begin_namespace -o:$organization -p:$project -e:$example)

$(indent_namespace -o:$organization -p:$project -e:$example)const util::Version &GetVersion () {
$(indent_namespace -o:$organization -p:$project -e:$example)    static const util::Version *version = new util::Version (
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_MAJOR_VERSION,
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_MINOR_VERSION,
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_PATCH_VERSION);
$(indent_namespace -o:$organization -p:$project -e:$example)    return *version;
$(indent_namespace -o:$organization -p:$project -e:$example)}

$(end_namespace -o:$organization -p:$project -e:$example)
EOF
check_errors $?

    cat > thekogans_make.xml << EOF
<thekogans_make organization = "${organization}"
                project = "${project}_${example}"
                project_type = "program"
                major_version = "0"
                minor_version = "1"
                patch_version = "0"
                guid = "`$(get_toolchain_program -o:thekogans -p:genguid)`"
                schema_version = "`$(get_toolchain_program -o:thekogans -p:make) -a:get_schema_version`">
  <dependencies>
    <dependency organization = "thekogans"
                name = "util"/>
  </dependencies>
  <cpp_headers prefix = "include">
    <cpp_header>\$(organization)/\$(project_directory)/Version.h</cpp_header>
  </cpp_headers>
  <cpp_sources prefix = "src">
    <cpp_source>main.cpp</cpp_source>
    <cpp_source>Version.cpp</cpp_source>
  </cpp_sources>
  <if condition = "\$(TOOLCHAIN_OS) == 'Windows'">
    <subsystem>Console</subsystem>
  </if>
</thekogans_make>
EOF
    check_errors $?
elif [ "$project_type" == "plugin" ]; then
    cat > include/"${organization}"/"${project//_//}"/"${example//_//}"/Config.h << EOF
#if !defined (__${organization}_${project}_${example}_Config_h)
#define __${organization}_${project}_${example}_Config_h

#if !defined (__cplusplus)
    #error lib${organization}_${project}_${example} requires C++ compilation (use a .cpp suffix)
#endif // !defined (__cplusplus)

#if defined (TOOLCHAIN_OS_Windows)
    #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_API __stdcall
    #if defined (_LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_BUILD)
        #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DECL __declspec (dllexport)
    #else // defined (_LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_BUILD)
        #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DECL __declspec (dllimport)
    #endif // defined (_LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_BUILD)
    #if defined (_MSC_VER)
        #pragma warning (disable: 4251)  // using non-exported as public in exported
        #pragma warning (disable: 4786)
    #endif // defined (_MSC_VER)
#else // defined (TOOLCHAIN_OS_Windows)
    #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_API
    #define _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DECL
#endif // defined (TOOLCHAIN_OS_Windows)

/// \def ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DISALLOW_COPY_AND_ASSIGN(type)
/// A convenient macro to suppress copy construction and assignment.
#define ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DISALLOW_COPY_AND_ASSIGN(type)\\
private:\\
    type (const type &);\\
    type &operator = (const type &);

/// \def ${ORGANIZATION}_${PROJECT}_${EXAMPLE}
/// Logging subsystem name.
#define ${ORGANIZATION}_${PROJECT}_${EXAMPLE} "${organization}_${project}_${example}"

#endif // !defined (__${organization}_${project}_${example}_Config_h)
EOF
    check_errors $?

    cat > include/"${organization}"/"${project//_//}"/"${example//_//}"/Version.h << EOF
#if !defined (__${organization}_${project}_${example}_Version_h)
#define __${organization}_${project}_${example}_Version_h

#include <thekogans/util/Version.h>

$(begin_namespace -o:$organization -p:$project -e:$example)

$(indent_namespace -o:$organization -p:$project -e:$example)/// \brief
$(indent_namespace -o:$organization -p:$project -e:$example)/// Return the compiled ${organization}_${project}_${example} version.
$(indent_namespace -o:$organization -p:$project -e:$example)/// \return Compiled ${organization}_${project}_${example} version.
$(indent_namespace -o:$organization -p:$project -e:$example)const thekogans::util::Version &GetVersion ();

$(end_namespace -o:$organization -p:$project -e:$example)

#endif // !defined (__${organization}_${project}_${example}_Version_h)
EOF
    check_errors $?

    cat > src/main.cpp << EOF
#include <thekogans/util/Plugins.h>
#include "${organization}/${project//_//}/${example//_//}/Config.h"
#include "${organization}/${project//_//}/${example//_//}/Version.h"

using namespace thekogans;

#if defined (__clang__)
    #pragma clang diagnostic push
    #pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

extern "C" {
    _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_DECL util::Plugins::Plugin::Interface &
    _LIB_${ORGANIZATION}_${PROJECT}_${EXAMPLE}_API GetPluginInterface () {
        struct PluginInterface : public util::Plugins::Plugin::Interface {
            virtual const util::Version &GetVersion () const throw () {
                return ${project//_/::}::${example//_/::}::GetVersion ();
            }
            virtual void Initialize () throw () {
                // FIXME: implement
            }
            virtual void Shutdown () throw () {
                // FIXME: implement
            }
        } static pluginInterface;
        return pluginInterface;
    }
}

#if defined (__clang__)
    #pragma clang diagnostic pop
#endif
EOF
    check_errors $?

    cat > src/Version.cpp << EOF
#include "${organization}/${project//_//}/${example//_//}/Version.h"

using namespace thekogans;

$(begin_namespace -o:$organization -p:$project -e:$example)

$(indent_namespace -o:$organization -p:$project -e:$example)const util::Version &GetVersion () {
$(indent_namespace -o:$organization -p:$project -e:$example)    static const util::Version *version = new util::Version (
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_MAJOR_VERSION,
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_MINOR_VERSION,
$(indent_namespace -o:$organization -p:$project -e:$example)        ${ORGANIZATION}_${PROJECT}_${EXAMPLE}_PATCH_VERSION);
$(indent_namespace -o:$organization -p:$project -e:$example)    return *version;
$(indent_namespace -o:$organization -p:$project -e:$example)}

$(end_namespace -o:$organization -p:$project -e:$example)
EOF
    check_errors $?

    cat > thekogans_make.xml << EOF
<thekogans_make organization = "${organization}"
                project = "${project}_${example}"
                project_type = "plugin"
                major_version = "0"
                minor_version = "1"
                patch_version = "0"
                build_type = "Shared"
                guid = "`$(get_toolchain_program -o:thekogans -p:genguid)`"
                schema_version = "`$(get_toolchain_program -o:thekogans -p:make) -a:get_schema_version`">
  <plugin_hosts>
  </plugin_hosts>
  <dependencies>
    <dependency organization = "thekogans"
                name = "util"/>
  </dependencies>
  <cpp_headers prefix = "include">
    <cpp_header>\$(organization)/\$(project_directory)/Config.h</cpp_header>
    <cpp_header>\$(organization)/\$(project_directory)/Version.h</cpp_header>
  </cpp_headers>
  <cpp_sources prefix = "src">
    <cpp_source>main.cpp</cpp_source>
    <cpp_source>Version.cpp</cpp_source>
  </cpp_sources>
</thekogans_make>
EOF
    check_errors $?
fi

if [ "$template" != "" ]; then
    cp -v "$TOOLCHAIN_ROOT"/common/resources/main."$template" src/main.cpp
    check_errors $?
fi

exit 0
