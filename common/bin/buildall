#!/bin/bash

# Copyright 2011 Boris Kogan (boris@thekogans.net)
#
# This file is part of thekogans_toolchain.
#
# thekogans_toolchain is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# thekogans_toolchain is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with thekogans_toolchain. If not, see <http://www.gnu.org/licenses/>.

# This script will build Debug-Static, Debug-Shared, Release-Static and
# Release-Shared variants of the given organization/project[/branch] or
# thekogans_make.xml.
# NOTE: This script is meant to be used by installers of libraries as
# it suppresses dependency generation. It also does not copy shared
# library dependencies.

function show_command_help () {
    common_options="\
[[-m | --mode]:[Development | Install]] \
[[-hc | --hide-commands]:[yes | no]] \
[[-pb | --parallel-build]:[yes | no]] \
[[-ta | --target]:[all | tests | tests_self | clean | clean_self | tags | tags_self]]"
    echo "usage: $0 \
$environment_options \
[[-o | --organization]:organization] \
[[-p | --project]:project] \
[[-b | --branch]:[trunk | branches/branch | tags/tag]] \
[[-v | --version]:version] \
[[-e | --example]:example] \
$common_options or"
    echo "       $0 \
$environment_options \
[-pr | --project-root]:'folder containing thekogans_make.xml' \
$common_options"
}

# Create the environment.
if [ "$TOOLCHAIN_ROOT" == "" ]; then
    TOOLCHAIN_COMMON_BIN="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)"
    if [ ! -e "$TOOLCHAIN_COMMON_BIN"/setenvironment ]; then
        echo "$TOOLCHAIN_COMMON_BIN/setenvironment not found."
        exit 1
    fi
    . "$TOOLCHAIN_COMMON_BIN"/setenvironment "$@"
fi

organization="$TOOLCHAIN_DEFAULT_ORGANIZATION"
project="$TOOLCHAIN_DEFAULT_PROJECT"
branch=
version=
example=
project_root=
mode=Install
hide_commands=yes
parallel_build=yes
target=all

# Parse command line options.
for i in "$@"; do
    case $i in
        -o:*|--organization:*)
            organization="${i#*:}"
            ;;
        -p:*|--project:*)
            project="${i#*:}"
            ;;
        -b:*|--branch:*)
            branch="${i#*:}"
            ;;
        -v:*|--version:*)
            version="${i#*:}"
            ;;
        -e:*|--example:*)
            example="${i#*:}"
            ;;
        -pr:*|--project-root:*)
            project_root="${i#*:}"
            ;;
        -m:*|--mode:*)
            mode="${i#*:}"
            ;;
        -hc:*|--hide-commands:*)
            hide_commands="${i#*:}"
            ;;
        -pb:*|--parallel-build:*)
            parallel_build="${i#*:}"
            ;;
    esac
done

# Validate input.
if [ "$project_root" == "" ]; then
    if [ "$organization" == "" ] || [ "$project" == "" ]; then
        echo "Must specify project root."
        exit 1
    fi
    project_root="$(get_project_root -o:$organization -p:$project -b:$branch -v:$version -e:$example)"
else
    project_root=`cd "$project_root"; pwd`
fi

config_file="$project_root"/thekogans_make.xml
if [ ! -e "$config_file" ]; then
    echo "$config_file Not found."
    exit 1
fi

if [ "$mode" != "Development" ] && [ "$mode" != "Install" ]; then
    echo "Unsupported mode [-m | --mode]: $mode [Development | Install]."
    exit 1
fi

if [ "$hide_commands" != "yes" ] && [ "$hide_commands" != "no" ]; then
    echo "Unsupported hide commands [-hc | --hide-commands]: $hide_commands [yes | no]."
    exit 1
fi

if [ "$parallel_build" != "yes" ] && [ "$parallel_build" != "no" ]; then
    echo "Unsupported parallel build [-pb | --parallel-build]: $parallel_build [yes | no]."
    exit 1
fi

if [ "$target" != "all" ] && \
        [ "$target" != "tests" ] && [ "$target" != "tests_self" ] && \
        [ "$target" != "clean" ] && [ "$target" != "clean_self" ] && \
        [ "$target" != "tags" ] && [ "$target" != "tags_self" ]; then
    echo "Unsupported target [-ta | --target]: $target [all | tests | tests_self | clean | clean_self | tags | tags_self]."
    exit 1
fi

# Build everything.
for config in Debug Release; do
    for type in Static Shared; do
        "$TOOLCHAIN_COMMON_BIN"/build \
            -pr:"$project_root" \
            -c:"$config" \
            -t:"$type" \
            -m:"$mode" \
            -hc:"$hide_commands" \
            -pb:"$parallel_build" \
            -ta:"$target"
        check_errors $?
    done
done

exit 0
