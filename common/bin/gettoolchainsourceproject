#!/bin/bash

# Copyright 2011 Boris Kogan (boris@thekogans.net)
#
# This file is part of thekogans_toolchain.
#
# thekogans_toolchain is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# thekogans_toolchain is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with thekogans_toolchain. If not, see <http://www.gnu.org/licenses/>.

# Download (if doesn't exist) the given toolchain source project and unpack it locally.

function show_command_help () {
    echo "usage: $0 \
$environment_options \
[[-o | --organization]:organization] \
[[-u | --url]:url] \
[-p | --project]:project \
[[-b | --branch]:[trunk | branches/branch | tags/tag]] \
[[-v | --version]:version] \
[[-s2 | --sha2-256]:sha2_256]"
}

# Create the environment.
if [ "$TOOLCHAIN_ROOT" == "" ]; then
    TOOLCHAIN_COMMON_BIN="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)"
    if [ ! -e "$TOOLCHAIN_COMMON_BIN"/setenvironment ]; then
        echo "$TOOLCHAIN_COMMON_BIN/setenvironment not found."
        exit 1
    fi
    . "$TOOLCHAIN_COMMON_BIN"/setenvironment "$@"
fi

organization="$TOOLCHAIN_DEFAULT_ORGANIZATION"
url=
project=
branch=
version=
sha2_256=

# Parse command line options.
for i in "$@"; do
    case $i in
        -o:*|--organization:*)
            organization="${i#*:}"
            ;;
        -u:*|--url:*)
            url="${i#*:}"
            ;;
        -p:*|--project:*)
            project="${i#*:}"
            ;;
        -b:*|--branch:*)
            branch="${i#*:}"
            ;;
        -v:*|--version:*)
            version="${i#*:}"
            ;;
        -s2:*|--sha2-256:*)
            sha2_256="${i#*:}"
            ;;
    esac
done

# Validate input.
if [ "$organization" == "" ] || [ "$project" == "" ]; then
    echo "Must specify organization and project."
    exit 1
fi

if [ "$branch" == "" ]; then
    branch="$(get_default_branch -o:thekogans -p:make)"
    check_errors $?
fi

if [ "$version" == "" ]; then
    version=`"$(get_toolchain_program -o:thekogans -p:make)" \
        -a:get_toolchain_source_project_latest_version \
        -o:"$organization" \
        -p:"$project"`
    check_errors $?
    if [ "$version" == "" ]; then
        echo "No entry for project $organization"_"$project in Sources.xml."
        exit 1
    fi
fi

if [ "$sha2_256" == "" ]; then
    sha2_256=`"$(get_toolchain_program -o:thekogans -p:make)" \
        -a:get_toolchain_source_project_sha2_256 \
        -o:"$organization" \
        -p:"$project" \
        -b:"$branch" \
        -v:"$version"`
    check_errors $?
fi

project_file="$organization"_"$project"
if [ "$branch" != "" ]; then
    project_file+="-${branch////_}"
fi
project_file+="-$version.tar.gz"

to="$TOOLCHAIN_ROOT/sources/$project_file"

function get_file_sha2_256 () {
    local sha2_256=`"$(get_toolchain_program -o:thekogans -p:hash)" \
        -h:SHA2 \
        -d:256 \
        -n \
        "$(to_system_path -p:$to)"`
    check_errors $?
    echo "$sha2_256"
}

if [ ! -e "$TOOLCHAIN_ROOT/sources" ]; then
    mkdir -p "$TOOLCHAIN_ROOT/sources"
    check_errors $?
fi

if [ ! -e "$to" ] || [ "$(get_file_sha2_256)" != "$sha2_256" ]; then
    if [ "$url" == "" ]; then
        url=`"$(get_toolchain_program -o:thekogans -p:make)" -a:get_toolchain_source_url -o:"$organization"`
        check_errors $?
        if [ "$url" == "" ]; then
            echo "No URL for $organization."
            exit 1
        fi
    fi
    from="$url/$organization/projects/$project_file"
    echo "Downloading $from -> $to"
    "$(get_toolchain_program -o:thekogans -p:curl)" -L -# -k "$from" -o "$(to_system_path -p:$to)"
    check_errors $?
    if [ "$(get_file_sha2_256)" != "$sha2_256" ]; then
        echo "$to failed integrity check."
        exit 1
    fi
fi

project_dir="$DEVELOPMENT_ROOT/$organization/${project//_//}"
if [ "$branch" != "" ]; then
    project_dir+="/$branch"
fi
project_dir+="-$version"
if [ -d "$project_dir" ]; then
    rm -rf "$project_dir"
    check_errors $?
fi

tar zxvf "$to" -C "$DEVELOPMENT_ROOT"
check_errors $?

exit 0
