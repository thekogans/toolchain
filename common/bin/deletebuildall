#!/bin/bash

# Copyright 2011 Boris Kogan (boris@thekogans.net)
#
# This file is part of thekogans_toolchain.
#
# thekogans_toolchain is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# thekogans_toolchain is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with thekogans_toolchain. If not, see <http://www.gnu.org/licenses/>.

# This script will delete Debug-Static, Debug-Shared, Release-Static and
# Release-Shared build system variants of the given organization/project/branch
# or thekogans_make.xml.

function show_command_help () {
    common_options="[-g | --generator]:'build system generator'"
    echo "usage: $0 \
$environment_options \
$common_options \
[[-o | --organization]:organization] \
[[-p | --project]:project] \
[[-b | --branch]:[trunk | branches/branch | tags/tag]] \
[[-v | --version]:version] \
[[-e | --example]:example] \
[[-d | --dependencies]:[yes | no]] or"
    echo "       $0 \
$environment_options \
$common_options \
[[-d | --dependencies]:[yes | no]] \
[-pr | --project-root]:'folder containing thekogans_make.xml'"
}

# Create the environment.
if [ "$TOOLCHAIN_ROOT" == "" ]; then
    TOOLCHAIN_COMMON_BIN="$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)"
    if [ ! -e "$TOOLCHAIN_COMMON_BIN"/setenvironment ]; then
        echo "$TOOLCHAIN_COMMON_BIN/setenvironment not found."
        exit 1
    fi
    . "$TOOLCHAIN_COMMON_BIN"/setenvironment "$@"
fi

generator="$TOOLCHAIN_DEFAULT_GENERATOR"
organization="$TOOLCHAIN_DEFAULT_ORGANIZATION"
project="$TOOLCHAIN_DEFAULT_PROJECT"
branch=
version=
example=
dependencies=yes
project_root=

# Parse command line options.
for i in "$@"; do
    case $i in
        -g:*|--generator:*)
            generator="${i#*:}"
            ;;
        -o:*|--organization:*)
            organization="${i#*:}"
            ;;
        -p:*|--project:*)
            project="${i#*:}"
            ;;
        -b:*|--branch:*)
            branch="${i#*:}"
            ;;
        -v:*|--version:*)
            version="${i#*:}"
            ;;
        -e:*|--example:*)
            example="${i#*:}"
            ;;
        -d:*|--dependencies:*)
            dependencies="${i#*:}"
            ;;
        -pr:*|--project-root:*)
            project_root="${i#*:}"
            ;;
    esac
done

# Validate input.
if [ "$project_root" == "" ]; then
    if [ "$organization" == "" ] || [ "$project" == "" ]; then
        echo "Must specify project root."
        exit 1
    fi
    project_root="$(get_project_root -o:$organization -p:$project -b:$branch -v:$version -e:$example)"
else
    project_root=`cd "$project_root"; pwd`
fi

config_file="$project_root"/thekogans_make.xml
if [ ! -e "$config_file" ]; then
    echo "$config_file Not found."
    exit 1
fi

if [ "$dependencies" != "yes" ] && [ "$dependencies" != "no" ]; then
    echo "Unsupported dependencies [-d | --dependencies]: $dependencies [yes | no]."
    exit 1
fi

thekogans_make="$(get_toolchain_program -o:thekogans -p:make)"

if [ "$dependencies" == "yes" ]; then
    dependencies_flag=-d
fi

# Execute command.
for config in Debug Release; do
    for type in Static Shared; do
        "$thekogans_make" \
            -a:delete_build_system \
            -g:"$generator" \
            -c:"$config" \
            -t:"$type" \
            "$dependencies_flag" \
            "$project_root"
        check_errors $?
    done
done

exit 0
