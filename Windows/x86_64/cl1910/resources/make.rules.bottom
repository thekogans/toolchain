# Copyright 2011 Boris Kogan (boris@thekogans.net)
#
# This file is part of thekogans_toolchain.
#
# thekogans_toolchain is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# thekogans_toolchain is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with thekogans_toolchain. If not, see <http://www.gnu.org/licenses/>.

# Windows/x86_64/cl1910

# IMPORTANT: To avoid conflicts with Cygwin, all Visual Studio tools
# are accessed through absolute paths. These paths are built using
# TOOLCHAIN_VISUAL_STUDIO_DIR/TOOLCHAIN_WINDOWS_SDK_DIR environment
# variables set in $TOOLCHAIN_ROOT/Windows/x86_64/setenvironment. If you're
# getting 'unable to locate...' errors from make, make sure those paths
# are set correctly.

# IMPORTANT: To mitigate the cost of $(shell cygpath...), I
# instrumented make-4.1 to recognize a 'windowspath' function. This
# function takes a list of 'cygdrive prefix/drive letter/path...' paths,
# and converts them to 'drive letter:/path...' format. It does this by
# comparing prefixes (cygdrive prefix). This has the desired effect of
# reducing build times 25-40% at the cost of maintaining a custom make
# (see $TOOLCHAIN_ROOT/README).

# IMPORTANT: To bridge the gap between GNU make and Windows, a make
# helper provides a number of functions to massage the output of various
# tools. This helper is called thekogans_make. If you're getting make
# syntax errors, this is the first place to look.

# On Windows you can choose the subsystem to be Windows or Console.
ifeq "$(subsystem)" ""
  subsystem := Console
endif

# Windows specific preprocessor definitions.
windows_preprocessor_definitions = $(common_preprocessor_definitions) $(features) WIN64 BOOST_ALL_NO_LIB
ifeq "$(project_type)" "program"
  ifeq "$(subsystem)" "Console"
    windows_preprocessor_definitions += _CONSOLE
  else
    windows_preprocessor_definitions += _WINDOWS
  endif
endif
ifeq "$(config)" "Debug"
  windows_preprocessor_definitions += _DEBUG
else
  windows_preprocessor_definitions += NDEBUG
endif

# Convert include directories form Cygwin path to Windows path.
windows_include_directories = $(windowspath $(include_directories) $(TOOLCHAIN_DIR)/include)

# IMPORTANT: If you introduce a new assembler,
# don't forget to update thekogans_make.

# masm
masm = $(TOOLCHAIN_VISUAL_STUDIO_DIR)/$(TOOLCHAIN_MASM)
masm_flags += -nologo -c -Cx -W3
ifeq "$(config)" "Debug"
  masm_flags += -Zi -Zd
endif
# masm doesn't support dependency generation.
make_masm_dependencies = touch $(subst .$(object_suffix),.$(dependencies_suffix),$@)
masm_it =\
  "$(masm)" $(masm_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(masm_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -Fo$(windowspath $@) $(windowspath $<)

# thekogans_make
thekogans_make = $(get_toolchain_program thekogans,make)

# thekogans_nasm
nasm = $(get_toolchain_program thekogans,nasm)
nasm_flags += -fwin64
nasm_preprocessor_definitions += __x86_64__
ifeq "$(config)" "Debug"
  nasm_flags += -g -O0
else
  nasm_flags += -Ox
endif
nasm_dependencies_flags =\
  -MT $@ -M -MF $(windowspath $(subst .$(object_suffix),.$(dependencies_suffix),$@))
make_nasm_dependencies =\
  "$(nasm)" $(nasm_flags) $(nasm_dependencies_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(nasm_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories)) $(windowspath $<);\
  "$(thekogans_make)" -a:update_windows_dependencies\
    $(windowspath $(subst .$(object_suffix),.$(dependencies_suffix),$@))
nasm_it =\
  "$(nasm)" $(nasm_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(nasm_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -o $(windowspath $@) $(windowspath $<)

# cl
cl = $(TOOLCHAIN_VISUAL_STUDIO_DIR)/cl.exe
cl_flags = -std:c++17 -nologo -c -W3 -EHsc -fp:precise -Gd -GS -Gm-
ifeq "$(config)" "Debug"
  ifeq "$(type)" "Shared"
    ifneq (,$(filter $(project_type),library plugin))
      cl_flags += -LDd
    endif
    cl_flags += -MDd
  else
    ifeq "$(runtime_type)" "Shared"
      cl_flags += -MDd
    else
      cl_flags += -MTd
    endif
  endif
  cl_flags += -Z7 -RTC1 -Od
else
  ifeq "$(type)" "Shared"
    ifneq (,$(filter $(project_type),library plugin))
      cl_flags += -LD
    endif
    cl_flags +=  -MD
  else
    ifeq "$(runtime_type)" "Shared"
      cl_flags += -MD
    else
      cl_flags +=  -MT
    endif
  endif
  cl_flags += -GL -Gy -O2 -Oi
endif
cl_dependencies_flags =\
  -E -showIncludes 1>$(addsuffix .i,$(basename $@))\
  2>$(subst .$(object_suffix),.$(dependencies_suffix),$@)

# c_compiler
make_c_dependencies =\
  "$(cl)" $(cl_flags) $(cl_dependencies_flags) $(c_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(c_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories)) $(windowspath $<);\
  rm $(addsuffix .i,$(basename $@));\
  "$(thekogans_make)" -a:update_cl_dependencies -d:"$@" -y:"$<"\
    $(windowspath $(subst .$(object_suffix),.$(dependencies_suffix),$@))
c_compile_it =\
  "$(cl)" $(cl_flags) $(c_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(c_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -Fo$(windowspath $@) $(windowspath $<)

# cpp_compiler
make_cpp_dependencies =\
  "$(cl)" $(cl_flags) $(cl_dependencies_flags) $(cpp_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(cpp_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories)) $(windowspath $<);\
  rm $(addsuffix .i,$(basename $@));\
  "$(thekogans_make)" -a:update_cl_dependencies -d:"$@" -y:"$<"\
    $(windowspath $(subst .$(object_suffix),.$(dependencies_suffix),$@))
cpp_compile_it =\
  "$(cl)" $(cl_flags) $(cpp_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(cpp_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -Fo$(windowspath $@) $(windowspath $<)

# rc_compiler
rc_compiler = $(TOOLCHAIN_WINDOWS_SDK_DIR)/rc.exe
rc_flags += -nologo
rc_compile_it =\
  "$(rc_compiler)" $(rc_flags)\
    $(addprefix -D,$(windows_preprocessor_definitions))\
    $(addprefix -D,$(rc_preprocessor_definitions))\
    $(addprefix -I,$(windows_include_directories))\
    -fo$(windowspath $@) $(windowspath $<)

# Convert the goal from Cygwin path to Windows path.
windows_goal = $(windowspath $(goal))
# Convert the object files from Cygwin path to Windows path.
windows_objects = $(windowspath $(objects))
# Convert the link libraries from Cygwin path to Windows path.
windows_link_libraries = $(windowspath $(link_libraries))

# linker
linker = $(TOOLCHAIN_VISUAL_STUDIO_DIR)/link.exe
linker_flags += -NOLOGO -DYNAMICBASE -NXCOMPAT -MACHINE:X64
ifeq "$(config)" "Release"
  linker_flags += -LTCG:INCREMENTAL
endif
ifneq (,$(filter $(project_type),library plugin))
  ifeq "$(type)" "Shared"
    linker_flags += -DLL
    ifeq "$(project_type)" "library"
      linker_flags +=\
        -IMPLIB:$(addsuffix .$(link_library_suffix),$(basename $(windows_goal)))
    endif
    ifneq "$(def_file)" ""
      linker_flags +=\
        -DEF:$(windowspath $(def_file))
    endif
  endif
else
  ifeq "$(subsystem)" "Console"
    linker_flags += -SUBSYSTEM:CONSOLE
  else
    linker_flags += -SUBSYSTEM:WINDOWS
  endif
endif
linker_flags += -LIBPATH:$(windowspath $(TOOLCHAIN_DIR)/lib)
windows_system_link_libraries = kernel32.lib user32.lib gdi32.lib\
  winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib\
  oleaut32.lib uuid.lib odbc32.lib odbccp32.lib
linker_command_file = $(addsuffix .linker,$(basename $@))

# librarian
librarian = $(TOOLCHAIN_VISUAL_STUDIO_DIR)/lib.exe
librarian_flags += -NOLOGO -MACHINE:X64
ifeq "$(config)" "Release"
  librarian_flags += -LTCG:INCREMENTAL
endif
librarian_command_file = $(addsuffix .librarian,$(basename $@))

ifneq (,$(filter $(project_type),library plugin))
  ifeq "$(type)" "Shared"
    link_it =\
      echo $(linker_flags)\
        $(windows_objects) $(windows_link_libraries)\
        $(windows_system_link_libraries) >$(linker_command_file);\
      "$(linker)" @$(windowspath $(linker_command_file)) -OUT:$(windows_goal);\
      rm $(linker_command_file)
  else
    link_it =\
      echo $(librarian_flags) $(windows_objects) >$(librarian_command_file);\
      "$(librarian)" @$(windowspath $(librarian_command_file)) -OUT:$(windows_goal);\
      rm $(librarian_command_file)
  endif
else
  link_it =\
    echo $(linker_flags)\
       $(windows_objects) $(windows_link_libraries)\
       $(windows_system_link_libraries) >$(linker_command_file);\
    "$(linker)" @$(windowspath $(linker_command_file)) -OUT:$(windows_goal);\
    rm $(linker_command_file)
endif

ifneq (,$(filter tests tests_self,$(MAKECMDGOALS)))
  test_link_it =\
    echo $(linker_flags)\
       $(windowspath $<) $(windows_goal) $(windows_link_libraries)\
       $(windows_system_link_libraries) >$(linker_command_file);\
    "$(linker)" @$(windowspath $(linker_command_file)) -OUT:$(windowspath $@);\
    rm $(linker_command_file)
endif
