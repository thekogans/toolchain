# Copyright 2011 Boris Kogan (boris@thekogans.net)
#
# This file is part of thekogans_toolchain.
#
# thekogans_toolchain is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# thekogans_toolchain is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with thekogans_toolchain. If not, see <http://www.gnu.org/licenses/>.

# Linux/x86_64/gcc

# Linux specific preprocessor definitions.
linux_preprocessor_definitions = $(common_preprocessor_definitions) $(features)
ifeq "$(config)" "Debug"
  linux_preprocessor_definitions += _DEBUG
else
  linux_preprocessor_definitions += NDEBUG
endif

# thekogans_nasm
nasm = $(get_toolchain_program thekogans,nasm)
nasm_flags += -felf64
ifeq "$(config)" "Debug"
  nasm_flags += -g -O0
else
  nasm_flags += -Ox
endif
nasm_dependencies_flags =\
  -MT $@ -M -MP -MF $(subst .$(object_suffix),.$(dependencies_suffix),$@)
nasm_preprocessor_definitions += ELF PIC __x86_64__
make_nasm_dependencies =\
  $(nasm) $(nasm_flags) $(nasm_dependencies_flags)\
    $(addprefix -D,$(linux_preprocessor_definitions))\
    $(addprefix -D,$(nasm_preprocessor_definitions))\
    $(addprefix -I,$(include_directories))\
    $(addprefix -I,$(TOOLCHAIN_DIR)/include) $<
nasm_it =\
  $(nasm) $(nasm_flags)\
    $(addprefix -D,$(linux_preprocessor_definitions))\
    $(addprefix -D,$(nasm_preprocessor_definitions))\
    $(addprefix -I,$(include_directories))\
    $(addprefix -I,$(TOOLCHAIN_DIR)/include) -o $@ $<

# gcc
gcc = gcc
gcc_flags = -c -m64 -Wall -fPIC -fno-common -pipe -march=native
ifeq "$(config)" "Debug"
  gcc_flags += -g
else
  gcc_flags += -O3
endif
gcc_dependencies_flags =\
  -MT $@ -MM -MP -MF $(subst .$(object_suffix),.$(dependencies_suffix),$@)

# c compiler
make_c_dependencies =\
  $(gcc) $(gcc_flags) $(gcc_dependencies_flags) $(c_flags)\
    $(addprefix -D,$(linux_preprocessor_definitions))\
    $(addprefix -D,$(c_preprocessor_definitions))\
    $(addprefix -I,$(include_directories))\
    $(addprefix -I,$(TOOLCHAIN_DIR)/include) $<
c_compile_it =\
  $(gcc) $(gcc_flags) $(c_flags)\
    $(addprefix -D,$(linux_preprocessor_definitions))\
    $(addprefix -D,$(c_preprocessor_definitions))\
    $(addprefix -I,$(include_directories))\
    $(addprefix -I,$(TOOLCHAIN_DIR)/include) -o $@ $<

# g++
gpp = g++
gpp_flags = -std=c++11 $(gcc_flags)

# cpp compiler
make_cpp_dependencies =\
  $(gpp) $(gpp_flags) $(gcc_dependencies_flags) $(cpp_flags)\
    $(addprefix -D,$(linux_preprocessor_definitions))\
    $(addprefix -D,$(cpp_preprocessor_definitions))\
    $(addprefix -I,$(include_directories))\
    $(addprefix -I,$(TOOLCHAIN_DIR)/include) $<
cpp_compile_it =\
  $(gpp) $(gpp_flags) $(cpp_flags)\
    $(addprefix -D,$(linux_preprocessor_definitions))\
    $(addprefix -D,$(cpp_preprocessor_definitions))\
    $(addprefix -I,$(include_directories))\
    $(addprefix -I,$(TOOLCHAIN_DIR)/include) -o $@ $<

# objective-c compiler
make_objective_c_dependencies =\
  $(gcc) $(gcc_flags) $(gcc_dependencies_flags) $(objective_c_flags)\
    $(addprefix -D,$(linux_preprocessor_definitions))\
    $(addprefix -D,$(objective_c_preprocessor_definitions))\
    $(addprefix -I,$(include_directories))\
    $(addprefix -I,$(TOOLCHAIN_DIR)/include) $<
objective_c_compile_it =\
  $(gcc) $(gcc_flags) $(objective_c_flags)\
    $(addprefix -D,$(linux_preprocessor_definitions))\
    $(addprefix -D,$(objective_c_preprocessor_definitions))\
    $(addprefix -I,$(include_directories))\
    $(addprefix -I,$(TOOLCHAIN_DIR)/include) -o $@ $<

# objective-cpp compiler
make_objective_cpp_dependencies =\
  $(gpp) $(gpp_flags) $(gcc_dependencies_flags) $(objective_cpp_flags)\
    $(addprefix -D,$(linux_preprocessor_definitions))\
    $(addprefix -D,$(objective_cpp_preprocessor_definitions))\
    $(addprefix -I,$(include_directories))\
    $(addprefix -I,$(TOOLCHAIN_DIR)/include) $<
objective_cpp_compile_it =\
  $(gpp) $(gpp_flags) $(objective_cpp_flags)\
    $(addprefix -D,$(linux_preprocessor_definitions))\
    $(addprefix -D,$(objective_cpp_preprocessor_definitions))\
    $(addprefix -I,$(include_directories))\
    $(addprefix -I,$(TOOLCHAIN_DIR)/include) -o $@ $<

# linker
ifneq (,$(filter $(project_type),library plugin))
  ifeq "$(type)" "Shared"
    gpp_linker_flags = -shared -Wl,-soname,$(notdir $@)
  endif
else
  gpp_linker_flags = '-Wl,-rpath,$$ORIGIN'
endif
gpp_linker_flags += $(addprefix -L,$(TOOLCHAIN_DIR)/lib)

# librarian
ar = ar
ar_flags += rc

ifneq (,$(filter $(project_type),library plugin))
  ifeq "$(type)" "Shared"
    link_it =\
      $(gpp) $(gpp_linker_flags) $(linker_flags) -o $@ $(objects) $(link_libraries)
  else
    link_it =\
      $(ar) $(ar_flags) $(librarian_flags) $@ $(objects);\
      ranlib $@
  endif
else
  link_it =\
    $(gpp) $(gpp_linker_flags) $(linker_flags) -o $@ $(objects) $(link_libraries);
  ifeq "$(config)" "Release"
    link_it += strip $@
  endif
endif

ifneq (,$(filter tests tests_self,$(MAKECMDGOALS)))
  test_link_it =\
    $(gpp) $(gpp_linker_flags) $(linker_flags) -o $@ $< $(goal) $(link_libraries);
  ifeq "$(config)" "Release"
    test_link_it += strip $@
  endif
endif
